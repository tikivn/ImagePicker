/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
  return !VERSION_NAME.contains("SNAPSHOT")
}

def getDestUrl() {
  if (isReleaseBuild()) {
    return "s3://$aws.bucket/$aws.path/releases"
  } else {
    return "s3://$aws.bucket/$aws.path/snapshots"
  }
}

def getOutputDir() {
  if (isReleaseBuild()) {
    return "${project.buildDir}/releases"
  } else {
    return "${project.buildDir}/snapshots"
  }
}

tasks.register("uploadArchivesS3", Exec) {
  dependsOn tasks.named("uploadArchives")

  environment 'AWS_ACCESS_KEY_ID', "$aws.accessKey"
  environment 'AWS_SECRET_ACCESS_KEY', "$aws.secretKey"
  commandLine 'aws', 's3', 'cp', '--recursive', "--region", aws.region, getOutputDir(), getDestUrl()
}


afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "file:///" + getOutputDir())

        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME
        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  tasks.named("install").configure {
    dependsOn tasks.named("assemble")

    repositories.mavenInstaller {
      configuration = configurations.archives

      pom.groupId = GROUP
      pom.artifactId = POM_ARTIFACT_ID
      pom.version = VERSION_NAME

      pom.project {
        name POM_NAME
        packaging POM_PACKAGING
        description POM_DESCRIPTION
        url POM_URL

        scm {
          url POM_SCM_URL
          connection POM_SCM_CONNECTION
          developerConnection POM_SCM_DEV_CONNECTION
        }

        licenses {
          license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
          }
        }

        developers {
          developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
          }
        }
      }
    }
  }

  tasks.register("androidJavadocs", Javadoc) {
    if (!project.plugins.hasPlugin('kotlin-android')) {
      source = android.sourceSets.main.java.srcDirs
    }
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/internal/*'

    if (JavaVersion.current().isJava8Compatible()) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
    options.encoding = 'UTF-8'
  }

  tasks.register("androidJavadocsJar", Jar) {
    dependsOn tasks.named("androidJavadocs")
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  tasks.register("androidSourcesJar", Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    if (project.getPlugins().hasPlugin('com.android.library')) {
      archives androidSourcesJar
      archives androidJavadocsJar
    } else {
      archives sourcesJar
      archives javadocJar
    }
  }
}
